---
- name: Create zammad system user
  user:
    name: "{{ zammad_user }}"
    state: present
    system: yes
  register: zammad_user_res
  tags: ['prepare', 'prepare-zammad']

- name: Ensure zammad base directory is present
  file:
    path: "{{ zammad_base_path }}"
    state: directory
    owner: "{{ zammad_user_res.uid }}"
    group: "{{ zammad_user_res.group }}"
    mode: "755"
  tags: [ 'prepare', 'prepare-zammad' ]
  notify: Initilize zammad

- name: Ensure zammad directories are present
  file:
    path: "{{ zammad_base_path }}/{{ item.dir }}"
    state: directory
    owner: "{{ zammad_user_res.uid }}"
    group: "{{ zammad_user_res.group }}"
    mode: "{{ item.mode | default('0755') }}"
  tags: [ 'prepare', 'prepare-zammad' ]
  notify: Restart zammad-stack
  loop: "{{ zammad_directories }}"

- name: Copy elasticsearch configuration
  copy:
    src: "{{ item.src }}"
    dest: "{{ zammad_base_path }}/elasticsearch-config/{{ item.src }}"
    owner: "{{ zammad_user_res.uid }}"
    group: "{{ zammad_user_res.group }}"
    mode: "{{ item.mode | default('0755') }}"
  tags: [ 'prepare', 'prepare-zammad' ]
  notify: Restart elasticsearch
  loop: "{{ zammad_elasticsearch_files }}"

- name: Template fake /etc/passwd for postgres
  template:
    src: postgres-passwd.j2
    dest: "{{ zammad_postgres_passwd_path }}"
    owner: "{{ zammad_user_res.uid }}"
    group: "{{ zammad_user_res.group }}"
    mode: "0755"
  tags: ['prepare', 'prepare-zammad']
  notify: Restart postgresql

- name: Template zammad-docker command
  template:
    src: zammad-docker.j2
    dest: "{{ zammad_command_dir }}/zammad-docker"
    owner: "root"
    group: "root"
    mode: "0755"
  tags: ['prepare', 'prepare-zammad']
  when: zammad_enable_command

- name: Ensure zammad container images are present
  docker_image:
    name: "{{ container.image_name }}:{{ container.image_tag }}"
    source: pull
    force_source: "{{ container.force_source | default(False) }}"
    state: present
  tags: ['prepare', 'prepare-zammad']
  loop: "{{ zammad_containers }}"
  loop_control:
    loop_var: container
    label: "{{ container.image_name }} ({{ container.name }})"

- name: Ensure zammad network is present
  docker_network:
    name: "{{ zammad_network.name }}"
  tags: ['deploy', 'deploy-zammad']
  notify: Restart zammad-stack

- name: Ensure zammad containers are started
  docker_container:
    name: "{{ container.name }}"
    image: "{{ container.image_name }}:{{ container.image_tag }}"
    env: "{{ container.env | default(omit) }}"
    user: "{{ container.user | default(zammad_user_res.uid) }}:{{ container.group | default(zammad_user_res.group) }}"
    entrypoint: "{{ container.entrypoint | default(omit) }}"
    command: "{{ container.command | default(omit) }}"
    network_mode: "{{ container.network_mode | default('default') }}"
    networks: "{% if container.add_host_network | default(False) %}{{ container.networks | default([]) + [zammad_host_network] }}{% else %}{{ container.networks | default(omit) }}{% endif %}"
    ports: "{{ container.ports | default(omit) }}"
    labels: "{{ container.labels | default(omit) }}"
    volumes: "{{ container.volumes | default(omit) }}"
    restart_policy: "{{ container.restart_policy }}"
    state: "{{ container.state | default('started') }}"
  tags: ['deploy', 'deploy-zammad']
  notify: Initilize zammad
  loop: "{{ zammad_containers }}"
  loop_control:
    loop_var: container
    label: "{{ container.name }}"
